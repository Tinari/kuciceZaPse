/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import controler.Controler;
import domen.IDomain;
import domen.JedinicaMere;
import domen.Materijal;
import domen.NacinIzrade;
import domen.KucicaZaPse;
import domen.Radnik;
import domen.StavkaIzrade;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import model.TableModelNacinIzrade;

/**
 *
 * @author Win 7
 */
public class FrmNacinIzrade extends javax.swing.JDialog {

    GlavnaForma frmGlavna;
    NacinIzrade refNacin;
    FrmPretragaNacinaIzrade frmPretraga;
    FrmKucicaZaPse frmPretraga2;
    int id;

    /**
     * Creates new form FrmNacinIzrade
     */
    public FrmNacinIzrade(java.awt.Frame parent, boolean modal, GlavnaForma frmGlavna) {
        super(parent, modal);
        initComponents();
        this.frmGlavna = frmGlavna;
        setLocationRelativeTo(null);
        popuniCmbKuciceZaPse();
        popuniCmbRadnike();
        prepareForm(FormMode.NEW);
        populateForm();

    }

    public FrmNacinIzrade(java.awt.Frame parent, boolean modal, int id, FrmPretragaNacinaIzrade frmPretraga, GlavnaForma frmGlavna) {
        super(parent, modal);
        initComponents();
        this.frmGlavna = frmGlavna;
        this.frmPretraga = frmPretraga;
        this.id = id;

        setLocationRelativeTo(null);
        popuniCmbKuciceZaPse();
        popuniCmbRadnike();
        prepareForm(FormMode.NEW);
        pripremiZaPregled(id);
    }

    FrmNacinIzrade(java.awt.Frame parent, boolean modal, int id, FrmKucicaZaPse frmPretraga2, GlavnaForma frmGlavna) {
        super(parent, modal);
        initComponents();
        this.frmGlavna = frmGlavna;
        this.frmPretraga = frmPretraga;
        this.id = id;

        setLocationRelativeTo(null);
        popuniCmbKuciceZaPse();
        popuniCmbRadnike();
        prepareForm(FormMode.NEW);
        pripremiZaPregled(id);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        datumUnosa = new datechooser.beans.DateChooserCombo();
        jLabel2 = new javax.swing.JLabel();
        cmbRadnik = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cmbKucicaZaPse = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOpis = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStvake = new javax.swing.JTable();
        btnDodajStvaku = new javax.swing.JButton();
        btnIzbrisiStvaku = new javax.swing.JButton();
        btnSacuvaj = new javax.swing.JButton();
        btnOtkazi = new javax.swing.JButton();
        btnPokreniIzmenu = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Datum:");

        jLabel2.setText("Radnik:");

        jLabel3.setText("Kucica za pse:");

        cmbKucicaZaPse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbKucicaZaPseActionPerformed(evt);
            }
        });

        jLabel4.setText("Opis:");

        txtOpis.setColumns(20);
        txtOpis.setRows(5);
        jScrollPane1.setViewportView(txtOpis);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dodavanje stavki"));

        tblStvake.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblStvake);

        btnDodajStvaku.setText("Dodaj stavku");
        btnDodajStvaku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajStvakuActionPerformed(evt);
            }
        });

        btnIzbrisiStvaku.setText("Izbrisi stavku");
        btnIzbrisiStvaku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzbrisiStvakuActionPerformed(evt);
            }
        });

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnOtkazi.setText("Otkazi");
        btnOtkazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtkaziActionPerformed(evt);
            }
        });

        btnPokreniIzmenu.setText("Pokreni izmenu");
        btnPokreniIzmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPokreniIzmenuActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cmbKucicaZaPse, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(datumUnosa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbRadnik, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addComponent(btnSacuvaj)
                                .addGap(28, 28, 28)
                                .addComponent(btnOtkazi)
                                .addGap(31, 31, 31)
                                .addComponent(btnPokreniIzmenu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnIzmeni))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDodajStvaku)))
                        .addGap(26, 26, 26)
                        .addComponent(btnIzbrisiStvaku)
                        .addGap(19, 19, 19)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(datumUnosa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbRadnik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbKucicaZaPse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDodajStvaku)
                    .addComponent(btnIzbrisiStvaku))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSacuvaj)
                    .addComponent(btnOtkazi)
                    .addComponent(btnPokreniIzmenu)
                    .addComponent(btnIzmeni))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOtkaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtkaziActionPerformed
        dispose();
    }//GEN-LAST:event_btnOtkaziActionPerformed

    private void btnDodajStvakuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajStvakuActionPerformed
        StavkaIzrade stavaka = new StavkaIzrade();
        TableModelNacinIzrade model = (TableModelNacinIzrade) tblStvake.getModel();
        model.dodajNovuStavku(stavaka);
    }//GEN-LAST:event_btnDodajStvakuActionPerformed

    private void btnIzbrisiStvakuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzbrisiStvakuActionPerformed

        int selektovani = tblStvake.getSelectedRow();
        if (selektovani >= 0) {
            TableModelNacinIzrade model = (TableModelNacinIzrade) tblStvake.getModel();
            model.obrisiStavku(selektovani);
        } else {
            JOptionPane.showMessageDialog(null, "Morate selektovati red");
        }

    }//GEN-LAST:event_btnIzbrisiStvakuActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        TableModelNacinIzrade model = (TableModelNacinIzrade) tblStvake.getModel();
        NacinIzrade nacinIzrade = model.getNacinIzrade();
        String opis = txtOpis.getText().trim();
        nacinIzrade.setOpis(opis);
        try {
            Date datum = datumUnosa.getSelectedDate().getTime();
            nacinIzrade.setDatum(datum);
            Radnik radnik = (Radnik) cmbRadnik.getSelectedItem();
            KucicaZaPse kucica = (KucicaZaPse) cmbKucicaZaPse.getSelectedItem();
            nacinIzrade.setRadnik(radnik);
            nacinIzrade.setKucicaZaPse(kucica);
            model.postavIdStavkama();

            if (opis.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Sva polja su obavezna!!!");
                return;
            }
            for (StavkaIzrade stavka : nacinIzrade.getStavakeIzrade()) {
                if (stavka.getKolicina() == 0) {
                    JOptionPane.showMessageDialog(this, "Kolicina mora biti veca od nule!");
                    return;
                }
            }

            for (int i = 0; i < nacinIzrade.getStavakeIzrade().size(); i++) {
                for (int j = 0; j < nacinIzrade.getStavakeIzrade().size(); j++) {
                    if (i != j && nacinIzrade.getStavakeIzrade().get(i).getMaterijal().equals(nacinIzrade.getStavakeIzrade().get(j).getMaterijal())) {
                        JOptionPane.showMessageDialog(null, "Ne mogu biti dve stavke sa istim materijalom");
                        return;
                    }

                }
            }
            refNacin = Controler.getInstance().zapamtiNacinIzrade(nacinIzrade);
            JOptionPane.showMessageDialog(this, "Sistem je zapamtio nacin izrade.");
            int result = JOptionPane.showConfirmDialog(null, "Da li zelite da nastavite sa unosom nacina izrade?");
            if (result == JOptionPane.YES_OPTION) {
                dispose();
                FrmNacinIzrade glavna = new FrmNacinIzrade(null, true, frmGlavna);
                glavna.setVisible(true);
            } else {
                dispose();
            }

        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Nije dobar format datuma(dd.MM.yyyy)!!!");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti nacin izrade.");
            Logger.getLogger(FrmNacinIzrade.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti nacin izrade.");
            Logger.getLogger(FrmNacinIzrade.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnPokreniIzmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPokreniIzmenuActionPerformed

        //frmGlavna.postaviStatus("Use case : Azuriranje podataka o nacinu izrade!");
        prepareForm(FormMode.EDIT);

        List<Materijal> materijali;
        try {
            materijali = controler.Controler.getInstance().vratiListuMaterijala();
            JComboBox comboBox = new JComboBox(new DefaultComboBoxModel(materijali.toArray()));

            TableColumn kolonaMaterijal = tblStvake.getColumnModel().getColumn(1);
            kolonaMaterijal.setCellEditor(new DefaultCellEditor(comboBox));

            List<JedinicaMere> jedinice = vratiJediniceMere();
            JComboBox comboBox1 = new JComboBox(new DefaultComboBoxModel(jedinice.toArray()));

            TableColumn kolonaJedinica = tblStvake.getColumnModel().getColumn(3);
            kolonaJedinica.setCellEditor(new DefaultCellEditor(comboBox1));

        } catch (Exception ex) {
            Logger.getLogger(FrmNacinIzrade.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnPokreniIzmenuActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed

        try {
            String opis = txtOpis.getText().trim();
            Date datum = datumUnosa.getSelectedDate().getTime();

            Radnik radnik = (Radnik) cmbRadnik.getSelectedItem();
            KucicaZaPse kzp = (KucicaZaPse) cmbKucicaZaPse.getSelectedItem();
            System.out.println("id nacin je ? " + id);
            NacinIzrade nacinIzrade = new NacinIzrade(id, opis, datum, radnik, kzp);
            TableModelNacinIzrade model = (TableModelNacinIzrade) tblStvake.getModel();
            List<StavkaIzrade> stavke = model.getNacinIzrade().getStavakeIzrade();

            if (opis.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Sva polja su obavezna!!!");
                return;
            }
            for (StavkaIzrade stavka : stavke) {
                if (stavka.getKolicina() == 0) {
                    JOptionPane.showMessageDialog(this, "Kolicina mora biti veca od nule!");
                    return;
                }
                stavka.setNacinIzrade(nacinIzrade);
            }
            nacinIzrade.setStavakeIzrade(stavke);
            for (int i = 0; i < nacinIzrade.getStavakeIzrade().size(); i++) {
                for (int j = 0; j < nacinIzrade.getStavakeIzrade().size(); j++) {
                    if (i != j && nacinIzrade.getStavakeIzrade().get(i).getMaterijal().equals(nacinIzrade.getStavakeIzrade().get(j).getMaterijal())) {
                        JOptionPane.showMessageDialog(null, "Ne mogu biti dve stavke sa istim materijalom");
                        return;
                    }

                }
            }

            nacinIzrade = Controler.getInstance().azurirajNacinIzrade(nacinIzrade);
            JOptionPane.showMessageDialog(null, "Sistem je izmenio nacin izrade kucice za pse!");
            
            dispose();
            // popuni tabelu
            frmPretraga.popuniTabelu();
            frmPretraga.pripremiZaPretragu();
            //spremi formu za pretragu
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmNacinIzrade.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Sistem ne moze da izmeni nacin izrade.");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da izmeni nacin izrade.");
            Logger.getLogger(FrmNacinIzrade.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void cmbKucicaZaPseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbKucicaZaPseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbKucicaZaPseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajStvaku;
    private javax.swing.JButton btnIzbrisiStvaku;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnOtkazi;
    private javax.swing.JButton btnPokreniIzmenu;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox cmbKucicaZaPse;
    private javax.swing.JComboBox<Object> cmbRadnik;
    private datechooser.beans.DateChooserCombo datumUnosa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblStvake;
    private javax.swing.JTextArea txtOpis;
    // End of variables declaration//GEN-END:variables

    private void popuniCmbKuciceZaPse() {
        try {
            cmbKucicaZaPse.removeAllItems();
            List<IDomain> kucice = Controler.getInstance().vratiListuKucicaZaPse();

            for (IDomain iDomain : kucice) {

                if (iDomain instanceof KucicaZaPse) {
                    cmbKucicaZaPse.addItem((KucicaZaPse) iDomain);
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmNacinIzrade.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FrmNacinIzrade.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void popuniCmbRadnike() {
        try {
            cmbRadnik.removeAllItems();

            List<Radnik> radnici = Controler.getInstance().vratiListuRadnika();
            for (IDomain iDomain : radnici) {
                if (iDomain instanceof Radnik) {
                    cmbRadnik.addItem((Radnik) iDomain);
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmNacinIzrade.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FrmNacinIzrade.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void prepareForm(FormMode mode) {
        switch (mode) {
            case NEW:
                btnIzmeni.setEnabled(false);
                btnPokreniIzmenu.setEnabled(false);
                datumUnosa.setEnabled(true);
                btnSacuvaj.setEnabled(true);
                btnOtkazi.setEnabled(true);

                txtOpis.setEnabled(true);
                cmbRadnik.setEnabled(true);
                cmbKucicaZaPse.setEnabled(true);
                break;
            case VIEW:
                btnIzmeni.setEnabled(false);
                datumUnosa.setEnabled(false);
                btnSacuvaj.setEnabled(false);
                btnOtkazi.setEnabled(true);
                btnPokreniIzmenu.setEnabled(true);

                txtOpis.setEnabled(false);
                cmbRadnik.setEnabled(false);
                cmbKucicaZaPse.setEnabled(false);
                btnDodajStvaku.setEnabled(false);
                btnIzbrisiStvaku.setEnabled(false);
                break;
            case EDIT:
                btnIzmeni.setEnabled(true);
                datumUnosa.setEnabled(false);

                btnPokreniIzmenu.setEnabled(false);
                btnSacuvaj.setEnabled(false);
                btnOtkazi.setEnabled(true);
                btnDodajStvaku.setEnabled(true);
                btnIzbrisiStvaku.setEnabled(true);

                txtOpis.setEnabled(true);
                cmbRadnik.setEnabled(true);
                cmbKucicaZaPse.setEnabled(true);

                break;
        }
    }

    private void populateForm() {

        NacinIzrade nacin = new NacinIzrade();
        TableModelNacinIzrade model = new TableModelNacinIzrade(nacin);
        tblStvake.setModel(model);

        List<Materijal> materijali;
        try {
            /* JComboBox cmbMeasurementUnit= new JComboBox<Object>();
             cmbMeasurementUnit.setModel(new DefaultComboBoxModel(MeasurementUnit.values()));
             TableColumn colum2=tblProduct.getColumnModel().getColumn(3);
             colum2.setCellEditor(new DefaultCellEditor(cmbMeasurementUnit));*/

            materijali = controler.Controler.getInstance().vratiListuMaterijala();
            JComboBox comboBox = new JComboBox(new DefaultComboBoxModel(materijali.toArray()));

            TableColumn kolonaMaterijal = tblStvake.getColumnModel().getColumn(1);
            kolonaMaterijal.setCellEditor(new DefaultCellEditor(comboBox));

            JComboBox jedinice = new JComboBox<Object>();
            jedinice.setModel(new DefaultComboBoxModel(JedinicaMere.values()));
            TableColumn kolona3 = tblStvake.getColumnModel().getColumn(3);
            kolona3.setCellEditor(new DefaultCellEditor(jedinice));

            /*List<JedinicaMere> jedinice = vratiJediniceMere();
             JComboBox comboBox1 = new JComboBox(new DefaultComboBoxModel(jedinice.toArray()));

             TableColumn kolonaJedinica = tblStvake.getColumnModel().getColumn(3);
             kolonaJedinica.setCellEditor(new DefaultCellEditor(comboBox1));*/
        } catch (Exception ex) {
            Logger.getLogger(FrmNacinIzrade.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private List<JedinicaMere> vratiJediniceMere() {
        List<JedinicaMere> jedinice = new ArrayList<>();
        jedinice.add(JedinicaMere.M);
        jedinice.add(JedinicaMere.ML);
        jedinice.add(JedinicaMere.L);
        jedinice.add(JedinicaMere.KOM);
        jedinice.add(JedinicaMere.KG);
        jedinice.add(JedinicaMere.G);
        jedinice.add(JedinicaMere.DM);
        jedinice.add(JedinicaMere.DL);
        jedinice.add(JedinicaMere.CM);

        return jedinice;
    }

    private void pripremiZaPregled(int id) {
        prepareForm(FormMode.VIEW);
        try {
            NacinIzrade rec = Controler.getInstance().vratiNacinIzradePoId(id);
            System.out.println("ovo je id nacina " + id);
            List<StavkaIzrade> stavke = Controler.getInstance().vratiStavkeZaNacin(rec);

            rec.setStavakeIzrade(stavke);
            /*for(StavkaIzrade st:stavke){
             System.out.println("ovo je dobijene stavka "+st.getMaterijal());
             }*/
            setTitle("Pregled nacina izrade : " + rec.getNacinId() + ", za proizvod " + rec.getKucicaZaPse().getNazivKuciceZaPse());
            TableModelNacinIzrade tableModel = new TableModelNacinIzrade(rec);
            tblStvake.setModel(tableModel);
            //tableModel.omoguciIzmenu(false);

            Radnik radnik = rec.getRadnik();
            cmbRadnik.setSelectedItem(radnik);
            System.out.println("RADNIK:" + rec.getRadnik().getIme() + " " + rec.getRadnik().getPrezime());
            Calendar cal = Calendar.getInstance();
            cal.setTime(rec.getDatum());
            datumUnosa.setSelectedDate(cal);
            txtOpis.setText(rec.getOpis());
            KucicaZaPse kzp = rec.getKucicaZaPse();
            System.out.println("PROIZVOD:" + kzp.getNazivKuciceZaPse());
            cmbKucicaZaPse.setSelectedItem(kzp);
        } catch (Exception ex) {
            Logger.getLogger(FrmNacinIzrade.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
